{"meta":{"title":"流浪的步行者","subtitle":"博客","description":"评价一件事情前一定要做完它","author":"吴文杰","url":"https://wuwenjie-max.github.io/-wuwenjie-max-.Github.io","root":"/-wuwenjie-max-.Github.io/"},"pages":[{"title":"about","text":"擅长写后台定时任务及后端接口， 习惯使用 python R 及shell 脚本完成。 喜欢探索新的技术及实现思路， 乐于学习和分享关于 数据库，后端开发， 数据分析及挖掘， 前端框架， 界面设计等方面的一切知识。","path":"about/index.html","date":"12-23","excerpt":""},{"title":"404","text":"layout: false没有发现您要找的内容.","path":"404/index.html","date":"12-20","excerpt":""},{"title":"����","text":"","path":"categories/index.html","date":"12-28","excerpt":""},{"title":"search","text":"","path":"search/index.html","date":"12-20","excerpt":""},{"title":"标签","text":"","path":"tags/index.html","date":"12-28","excerpt":""},{"title":"记录要落实的感想","text":"","path":"记录要落实的感想/index.html","date":"12-29","excerpt":""}],"posts":[{"title":"python 后端面试题","text":"Python 语法及基础部分 1: 基础类型中可变与不可变类型？ 不可变类型 整型 int 字符串 str 浮点型 float 元组 tuple 可变类型 字典 dict 列表 list 2: 深拷贝与浅拷贝的区别？ 先要清楚python 中对象和变量是如何在内存中储存的 基础类型数据以固定的大小保存在内存中 变量对应保存的是一个引用地址， 地址对应的是内存中的数据， 浅拷贝只是复制了这个引用地址， 深拷贝是备份了整个对象； eg : import copy var = [1,[2,3]] c1 = copy.copy(var) c2 = copy.deepcopy(var) 3: __new__() 与 __init__() 的区别？ __new__ 作用与 __init__ 之前， 前者是创建实例对象， 后者是初始化实例对象。 4：知道几种设计模式，简单介绍一下 单例模式： 保证一个类只有一个实例，并且在其它地方都调用这个实例。保证唯一性。 装饰器模式： 不改变元类代码和继承关系的情况下动态扩展类的功能。 迭代器模式： 一种行为设计模式， 在不暴露底层表现形式的情况下遍历集合中所有的元素。 命令模式： 将“请求”封装成对象，将其作为命令调用者和接收者的中介，而抽象出来的命令对象又使得能够对一系列请求进行特殊操作。 适用于请求调用者和请求接受者解耦，支持修改日志，撤销操作。 5：编码和解码 ·编码/encode: 将unicode 字符串转换成特定编码格式对应的字节码的过程； ·解码/decode: 将特定解码格式的字节码转换成 unicode 字符串； 6：列表推导和生成器的优劣； 列表推导式是将所有的值一次性加载到内存中， 简单直观 生成器表达式在数据量大的时候使用， 返回的是生成器。 7： 装饰器概念 装饰器本身是一种函数， 包装别的函数和类， 在不改变原有函数和类的情况下增加操作。 接收函数-》内部包装-》加操作-》返回包装后的新函数 8： 手写使用装饰器的单例模式 from functools import wraps def my_func(f): @wraps(f) def fn(*args, **kwargs): print(&quot;new word&quot;) return f(*args, **kwargs) return fn @my_func def test(num): print(num*num) return num*num x = test(10) 9: 手写正则表达式 邮箱： &apos;^[a-zA-Z0-9_.-]+@[a-zA-Z0-9]+\\.[a-z]&apos; 身份证： &apos;(^\\d{15}$)|(^\\d{18}$)|(^\\d{17}(\\d|X|x)$)&apos; 10: 介绍垃圾回收机制 【引用计数/分代回收/孤立引用环】 python 解释器对正在使用的对象保持计数， 当某个对象的引用次数将为0，标记为待释放对象， 当分配对象与待释放对象的差值高于阈值时垃圾回收启用； 分代回收： python 将所有对象分为0，1，2 三代， 所有新建对象都是0代， 当某个0代对象经过垃圾回收后依然存在就归类为下一代； 垃圾回收时一定会检查0代对象， 一定次数0代清理后开始0，1代清理， 一定次数0，1代清理后0，1，2代清理。 孤立引用环： 互相引用的环 11： 多进程与多线程的区别； CPU密集型适合用什么？ 多线程或多进程完成任务，多线程共享内存空间， 多进程内存独立。 同一个进程中的多个线程可以互相通信； 2个进程想通信必须通过中间代理； 一个线程可以操作同个进程中的其它线程， 一个进程只能操作子进程； 优缺点：多进程稳定性更好，某个子进程崩溃不会影响其它进程， 但是必须消耗硬件资源； 多线程效率对比多进程要高， 但是一个线程崩溃会导致整个进程崩溃； CPU密集型适合用多进程 12： 进程通信的方式； 进程间通信主要包括管道， 系统IPC（消息队列，信号量，共享储存），SOCKET 13: 介绍协程， 为何比线程快； -个CPU 支持上万协程很容易， 很适合高并发处理， 协程能保留上次调用的状态， 进程和线程在阻塞和切换的时候会陷入系统调用， 花费时间。 使用线程时要小心处理同步问题，协程不需要。算法排序部分 14 手写快排， 堆排， 几种常用排序的算法复杂度，快排平均复杂度多少， 最坏情况如何优化？ 15 手写， 已知一个长度n的无序列表， 元素均为数值， 要求把所有间距为d的组合找出。 16 手写， 一个列表 A=[A1,A2,’’’An], 把所有组合打印出来。 17 手写， 1+2+3+…+108; out = sum([x for x in range(1,108)]) 18 用递归方法判断字符串是否为回文？ def test(str): if len(str) &lt; 2: return True if str[0] != str[-1]: return False return test(str[1:-1]) 19 单向链表长度未知，如何判断其中是否有环； 常用思路是快慢指针 class Node(): def __init__(self, num): self.item = num self.next = None def func(a:Node): x = a y = a out = &apos;无环结构&apos; while y.next and y.next.next: x = x.next y = y.next.next if x == y: out = &apos;有环结构&apos; break return out node1 = Node(1) node2 = Node(2) node3 = Node(3) node4 = Node(4) node5 = Node(5) node4.next = node5 node3.next = node4 node2.next = node3 node1.next = node2 node5.next = node1 print(func(node1)) 20 单向链表使用快排进行排序； 21 一个长度为n 的无序数字元素列表，求中位数。 def func(num): if len(num) &lt;= 1: return num a = len(num) // 2 if len(num)%2 == 0: out = (num[a] + num[a-1])/2 else: out = num[a] return out 22 如何遍历一个内部未知的文件夹【两种树的优先遍历方法】网络基础部分 23 TCP与IP TCP 在传输层 IP 在网络层 24 socket 长连接是是什么意思？ 在一个TCP连接上可以连续发送多个数据包， 在TCP连接保持期间， 如果没有数据包需要发送， 需要双方发检测包维持此连接， 一般需要自己做在线保持， 长连接是指建立socket 连接后不管是否使用都保持连接， 安全性较差； 比如数据库连接就使用的 socket 长连接。如果短连接频发的通信会导致socket， 频繁的创建socket也会占用大量系统资源。 25 select 和 epoll 了解程度， 区别。 26 TCP UDP 区别【三次握手，四次挥手】 TCP 协议： （在传输前先建立连接）面向连接（的通信传输协议），可靠的数据传输，失序， 无差错，无丢失， 无重复。 用途： 适用于传输内容比较大， 网络传输稳定， 需要提供准确信息的情况。 udp 协议： 面对无连接的服务， 不可靠， 发送时由发送端直接发送， 不考虑接收端。 用途： 适用于网络较差， 对传输准确性要求低， 比如广播等 27 TIME_WAIT 过多是因为什么。 28 http 的完整过程。 用户发起request -&gt; 域名解析 -》 TCP连接 -》 发送具体的http请求 -》 服务器端响应结果 -》 浏览器得到返回结果并解析 -》 浏览器渲染结果 【用户得到response】 29 http连接方式 ？ get 和 post 的区别 定义上来讲 get 是从服务端请求数据， post 是向服务端提交数据。 get 请求数据会在url 中， post 则放在请求体中， 比get 安全性高一些。 30 restful 了解程度？ 31 常见状态码及含义 200： 操作成功 403： 访问受限，授权过期。 404： 资源，服务器未找到 504： 网关超时，服务器作为网关和代理， 没有及时从上游服务器获取到请求。","path":"2020/09/25/python-后端面试题/","date":"09-25","excerpt":"","tags":[]},{"title":"日记_20200115","text":"今天记录2020年1月2月份目标【预计】【达到初级入门】1 常用数据结构及算法 ，分布式基础概念2 框架 Django/Twisted3 开源组件 Nginx Redis MongoDB 等4 使用 elasticsearch ？5 前端知识 js css html6 web框架 Spring Django Flask Tornado","path":"2020/01/15/日记-20200115/","date":"01-15","excerpt":"","tags":[]},{"title":"日记-20200111","text":"现在生活被别人赶着跑，感觉有点难受，最求安逸是最傻的念头，保证自己的市场竞争力是当前第一要务。","path":"2020/01/11/日记-20200111/","date":"01-11","excerpt":"","tags":[{"name":"日记","slug":"日记","permalink":"https://wuwenjie-max.github.io/-wuwenjie-max-.Github.io/tags/%E6%97%A5%E8%AE%B0/"}],"preview":"imgs/preview/preview6.jpg"},{"title":"记录要落实的感想","text":"这个想法来来自于一篇博客， 信息 –【过滤】–》有用信息 –【内化】–》知识， 起名为个人知识管理系统。来源 @ http://www.zmonster.me/2016/10/11/pkm-design-overview.html 个人认为这个理念可以帮助个人将时间倾向于 积累+成长 。 2020年，看来不想是我的幸运年。","path":"2019/12/29/记录要落实的感想/","date":"12-29","excerpt":"","tags":[{"name":"感想+计划","slug":"感想-计划","permalink":"https://wuwenjie-max.github.io/-wuwenjie-max-.Github.io/tags/%E6%84%9F%E6%83%B3-%E8%AE%A1%E5%88%92/"}],"preview":"imgs/preview/preview5.jpg"},{"title":"blog record","text":"博客运行记录 初始安装步骤 安装node.js 添加阿里国内镜像源加速 npm config set registry https://registry.npm.taobao.org 安装git https://link.zhihu.com/?target=https%3A//git-scm.com/download/win最后一步添加路径时选择Use Git from the Windows Command Prompt，这样我们就可以直接在命令提示符里打开git了。安装完成后在命令提示符中输入git –version验证是否安装成功。 注册Github账户，开启github pages 安装Hexo a. 在合适的地方新建一个文件夹，用来存放自己的博客文件，比如我的博客文件都存放在D:\\study\\program\\blog目录下。 b. 在该目录下右键点击Git Bash Here，打开git的控制台窗口，以后我们所有的操作都在git控制台进行，就不要用Windows自带的控制台了。 c. 定位到该目录下，输入npm i hexo-cli -g安装Hexo。会有几个报错，无视它就行。 d. 安装完后输入hexo -v验证是否安装成功。 f. 然后就要初始化我们的网站，输入hexo init初始化文件夹，接着输入npm install安装必备的组件。 g. 这样本地的网站配置也弄好啦，输入hexo g生成静态网页，然后输入hexo s打开本地服务器，然后浏览器打开http://localhost:4000/. 连接Github与本地 首先右键打开git bash，然后输入下面命令： git config –global user.name “godweiyang” git config –global user.email “792321264@qq.com“ 用户名和邮箱根据你注册github的信息自行修改。 然后生成密钥SSH key： ssh-keygen -t rsa -C “792321264@qq.com“ 打开github，在头像下面点击settings，再点击SSH and GPG keys，新建一个SSH，名字随便。 git bash中输入 cat ~/.ssh/id_rsa.pub 将输出的内容复制到框中，点击确定保存。 输入ssh -T git@github.com 打开博客根目录下的_config.yml文件，这是博客的配置文件，在这里你可以修改与博客相关的各种信息。 修改最后一行的配置： deploy: type: git repository: https://github.com/godweiyang/godweiyang.github.io branch: master repository修改为你自己的github项目地址。 写文章、发布文章 a. 首先在博客根目录下右键打开git bash，安装一个扩展npm i hexo-deployer-git。 b. 然后输入hexo new post “article title”，新建一篇文章。 c. 然后打开D:\\study\\program\\blog\\source_posts的目录，可以发现下面多了一个文件夹和一个.md文件，一个用来存放你的图片等数据，另一个就是你的文章文件啦。 d. 编写完markdown文件后，根目录下输入hexo g生成静态网页，然后输入hexo s可以本地预览效果，最后输入hexo d上传到github上。这时打开你的github.io主页就能看到发布的文章啦。 hexo+git+node.js安装后设置多PC 设置hexo为默认分支（因为我们只需要手动管理这个分支上的Hexo网站文件）； 使用git clone git@github.com:CrazyMilk/CrazyMilk.github.io.git拷贝仓库； 本地博客的部署文件（Hexo目录下的全部文件）全部拷贝进username.github.io文件目录中去。接下来，进入username.github.io文件目录下，将该目录下的全部文件提交到xxx分支，提交之前需注意：将themes目录以内中的主题的.git目录删除（如果有），因为一个git仓库中不能包含另一个git仓库，提交主题文件夹会失败。可能有人会问，删除了themes目录中的.git不就不能git pull更新主题了吗，很简单，需要更新主题时在另一个地方git clone下来该主题的最新版本，然后将内容拷到当前主题目录即可 执行git add .、git commit -m ‘back up hexo files’（引号内容可改）、git push即可将博客的hexo部署环境提交到GitHub个人仓库的xxx分支。 新电脑同步更改blog 将新电脑的生成的ssh key添加到GitHub账户上 在新电脑上克隆username.github.io仓库的xxx分支到本地，此时本地git仓库处于xxx分支 切换到username.github.io目录，执行npm install(由于仓库有一个.gitignore文件，里面默认是忽略掉 node_modules文件夹的，也就是说仓库的hexo分支并没有存储该目录[也不需要]，所以需要install下) 编辑、撰写文章或其他博客更新改动依次执行git add .、git commit -m ‘back up hexo files’（引号内容可改）、git push指令，保证xxx分支版本最新执行hexo d -g指令（在此之前，有时可能需要执行hexo clean），完成后就会发现，最新改动已经更新到master分支了，两个分支互不干扰！注意： 每次换电脑进行博客更新时，不管上次在其他电脑有没有更新，最好先git pull ** 更换主题为galthanks: https://github.com/ZEROKISEKI/hexo-theme-gal","path":"2019/12/19/blog-record/","date":"12-19","excerpt":"","tags":[{"name":"博客建立日志","slug":"博客建立日志","permalink":"https://wuwenjie-max.github.io/-wuwenjie-max-.Github.io/tags/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E7%AB%8B%E6%97%A5%E5%BF%97/"}],"preview":"imgs/preview/preview4.jpg"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.front-matter：preview2.png Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","path":"2019/12/19/hello-world/","date":"12-19","excerpt":"","tags":[],"preview":"imgs/preview/preview2.jpg"},{"title":"shell record","text":"LINUX 常用命令记录1： ps -e -o ppid,stat,user |grep S |grep user |cut -c 1-5 |xargs kill -9 [清除sleep进程]2： sed -i ‘s/old/new/g’ //.sh [替换指定文件中的某些字符串]3： grep -rn ‘str’ /dir/ [查看包含str 的文件及行数]4: cat file.txt |awk ‘{if(NR==10){print}}’ [只打印file.txt文件的第十行]5： last -n 10 |awk ‘{print $1}’ [前10行中只打印第一列]6： cat /etc/passwd |awk -F ‘:’ ‘{print $1}’ [以’:’分割 ，只看passwd文件中第一列]7： awk 内置变量 ： ARGC 命令行参数个数 ARGV 命令行参数排列 ENVIRON 支持队列中系统环境变量的使用 FILENAME awk浏览的文件名 FNR 浏览文件的记录数 FS 设置输入域分隔符，等价于命令行 -F选项 NF 浏览记录的域的个数 NR 已读的记录数 OFS 输出域分隔符 ORS 输出记录分隔符 RS 控制记录分隔符 待续","path":"2019/12/18/shell-record/","date":"12-18","excerpt":"","tags":[{"name":"shell","slug":"shell","permalink":"https://wuwenjie-max.github.io/-wuwenjie-max-.Github.io/tags/shell/"}],"preview":"imgs/preview/preview3.jpg"},{"title":"article title","text":"这是第一次写自己的博客，纪念一下【2019-12-17】。 thankes https://zhuanlan.zhihu.com/p/35668237","path":"2019/12/17/article-title/","date":"12-17","excerpt":"","tags":[{"name":"生活","slug":"生活","permalink":"https://wuwenjie-max.github.io/-wuwenjie-max-.Github.io/tags/%E7%94%9F%E6%B4%BB/"},{"name":"纪念","slug":"纪念","permalink":"https://wuwenjie-max.github.io/-wuwenjie-max-.Github.io/tags/%E7%BA%AA%E5%BF%B5/"}],"preview":"imgs/preview/preview1.jpg"}]}